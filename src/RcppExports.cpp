// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Stepwise_Split
Rcpp::List Stepwise_Split(arma::mat x, arma::vec y, arma::uword n_models, arma::uword max_variables_per_model, const arma::uword& model_criterion, const arma::uword& stop_criterion, const double& stop_parameter, const arma::uword& shrinkage, const double& alpha, const arma::uword& include_intercept, const arma::uword& n_lambda, const double& tolerance, const arma::uword& max_iter, const arma::uword& n_folds);
RcppExport SEXP _stepSplitReg_Stepwise_Split(SEXP xSEXP, SEXP ySEXP, SEXP n_modelsSEXP, SEXP max_variables_per_modelSEXP, SEXP model_criterionSEXP, SEXP stop_criterionSEXP, SEXP stop_parameterSEXP, SEXP shrinkageSEXP, SEXP alphaSEXP, SEXP include_interceptSEXP, SEXP n_lambdaSEXP, SEXP toleranceSEXP, SEXP max_iterSEXP, SEXP n_foldsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n_models(n_modelsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type max_variables_per_model(max_variables_per_modelSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type model_criterion(model_criterionSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type stop_criterion(stop_criterionSEXP);
    Rcpp::traits::input_parameter< const double& >::type stop_parameter(stop_parameterSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type shrinkage(shrinkageSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type include_intercept(include_interceptSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type n_lambda(n_lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type n_folds(n_foldsSEXP);
    rcpp_result_gen = Rcpp::wrap(Stepwise_Split(x, y, n_models, max_variables_per_model, model_criterion, stop_criterion, stop_parameter, shrinkage, alpha, include_intercept, n_lambda, tolerance, max_iter, n_folds));
    return rcpp_result_gen;
END_RCPP
}
// CV_Stepwise_Split
Rcpp::List CV_Stepwise_Split(arma::mat x, arma::vec y, const arma::vec& n_models, arma::uword& max_variables_per_model, const arma::uword& model_criterion, const arma::uword& stop_criterion, const double& stop_parameter, const arma::uword& shrinkage, const double& alpha, const arma::uword& include_intercept, const arma::uword& n_lambda, const double& tolerance, const arma::uword& max_iter, const arma::uword& n_folds, const arma::uword& n_threads);
RcppExport SEXP _stepSplitReg_CV_Stepwise_Split(SEXP xSEXP, SEXP ySEXP, SEXP n_modelsSEXP, SEXP max_variables_per_modelSEXP, SEXP model_criterionSEXP, SEXP stop_criterionSEXP, SEXP stop_parameterSEXP, SEXP shrinkageSEXP, SEXP alphaSEXP, SEXP include_interceptSEXP, SEXP n_lambdaSEXP, SEXP toleranceSEXP, SEXP max_iterSEXP, SEXP n_foldsSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n_models(n_modelsSEXP);
    Rcpp::traits::input_parameter< arma::uword& >::type max_variables_per_model(max_variables_per_modelSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type model_criterion(model_criterionSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type stop_criterion(stop_criterionSEXP);
    Rcpp::traits::input_parameter< const double& >::type stop_parameter(stop_parameterSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type shrinkage(shrinkageSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type include_intercept(include_interceptSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type n_lambda(n_lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type n_folds(n_foldsSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(CV_Stepwise_Split(x, y, n_models, max_variables_per_model, model_criterion, stop_criterion, stop_parameter, shrinkage, alpha, include_intercept, n_lambda, tolerance, max_iter, n_folds, n_threads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_stepSplitReg_Stepwise_Split", (DL_FUNC) &_stepSplitReg_Stepwise_Split, 14},
    {"_stepSplitReg_CV_Stepwise_Split", (DL_FUNC) &_stepSplitReg_CV_Stepwise_Split, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_stepSplitReg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
